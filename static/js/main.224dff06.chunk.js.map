{"version":3,"sources":["contracts/useContract.js","utils.js","context/Wallet.js","components/tabs/yourSharesTab.js","components/tabs/migrateTab_zlot.js","components/tabs/migrateTab.js","context/Pool.js","components/dashboard.js","components/header.js","components/intro.js","connectors.js","App.js","hooks.js","serviceWorker.js","index.js"],"names":["getContract","address","ABI","library","account","ethers","Contract","getSigner","useContract","withSignerIfPossible","useWeb3React","useMemo","undefined","error","console","useStakingPoolContract","STAKING_POOL_ABI","useNewStakingPoolContract","NEW_STAKING_POOL_ABI","useHegicContract","HEGIC_ABI","useZHegicContract","truncateEtherValue","str","maxDecimalDigits","includes","parts","split","slice","formatBN","bn","utils","commify","formatEther","toString","Asset","WalletContext","parseEther","createContext","context","balances","allowances","poolConditions","profits","connect","disconnect","YourSharesTab","wallet","useContext","stakingPool","chainId","useState","BigNumber","from","profitETH","setProfitETH","profitWBTC","setProfitWBTC","statusMsg","setStatusMsg","claimButtonDisabled","setClaimButtonDisabled","amountToWithdraw","setAmountToWithdraw","withdrawButtonEnabled","setWithdrawButtonEnabled","statusType","setStatusType","useEffect","status","lte","sHEGICBalance","value","waitAndUpdate","txRequest","a","style","color","target","href","hash","wait","claimProfit","claimAllProfit","profitOf","then","profit","isZero","withdrawHegic","amount","withdraw","canWithdraw","x","claimProfitAndWithdrawAll","claimProfitAndWithdraw","StatusMsg","Alert","Row","Col","sm","Card","body","CardTitle","display","flexDirection","textAlign","width","className","formatUnits","Button","marginTop","disabled","onClick","fontSize","ownerPerformanceFee","Badge","InputGroup","Input","placeholder","onChange","event","InputGroupAddon","addonType","InputGroupText","MigrateTabZLot","zHEGIC","newStakingPool","totalBalance","setTotalBalance","setLockedBalance","allowanceIsZero","setAllowanceIsZero","totalNumberOfStakingLots","setTotalNumberOfStakingLots","numberOfStakingLotsETH","setNumberOfStakingLotsETH","numberOfStakingLotsWBTC","setNumberOfStakingLotsWBTC","amountToDeposit","setAmountToDeposit","depositButtonEnabled","setDepositButtonEnabled","zHEGICBalance","HEGICBalance","zHEGICAllowance","balance","lockedBalance","n","toNumber","numberOfStakingLots","allow","amountToAllow","approve","migrateHegic","migrateFromOldStakingPool","CardText","margin","padding","MigrateTab","HEGICAllowance","PoolContext","Dashboard","STAKING_ETH_ABI","STAKING_WBTC_ABI","WBTC_ABI","lots","setValue","activeTab","setActiveTab","toggle","tab","Container","md","size","offset","Nav","tabs","justifyContent","borderBottom","NavItem","NavLink","classnames","active","TabContent","Provider","TabPane","tabId","marginBottom","Header","props","HEGIC","getBalance","ETHBalance","balanceOf","allowance","fee","performanceFee","filter_inputs","topics","id","hexZeroPad","filter_outputs","filter_approve","filter_profit","on","log","Wallet","zIndex","fontFamily","fontWeight","len","length","substring","truncateAddress","Navbar","backgroundColor","Intro","minHeight","lineHeight","textTransform","injected","InjectedConnector","supportedChainIds","getLibrary","provider","connector","providers","Web3Provider","App","setETHBalance","setHEGICBalance","setSHEGICBalance","setZHEGICBalance","setHEGICAllowance","setZHEGICAllowance","setOwnerPerformanceFee","ownerCanWithdraw","setOwnerCanWithdraw","activate","deactivate","activatingConnector","setActivatingConnector","suppress","ethereum","window","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","tried","setTried","isAuthorized","catch","useEagerConnect","background","backgroundImage","height","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.224dff06.chunk.js","sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { useMemo } from 'react'\nimport { ethers } from 'ethers'\n\nimport { abi as STAKING_POOL_ABI } from './json/HegicStakingPool.json'\nimport { abi as NEW_STAKING_POOL_ABI } from './json/NewHegicStakingPool.json'\nimport { abi as STAKING_ETH_ABI } from './json/FakeHegicStakingETH.json'\nimport { abi as STAKING_WBTC_ABI } from './json/FakeHegicStakingWBTC.json'\nimport { abi as HEGIC_ABI } from './json/FakeHEGIC.json'\nimport { abi as WBTC_ABI } from './json/FakeWBTC.json'\n\n// TEST1 CONTRACTS\n// const POOLED_STAKING_ETH_ADDRESS = '0x47B7C230E8624eB598046DB751A7abDE891df95a'\n// const POOLED_STAKING_WBTC_ADDRESS = '0xa3ae456c6b1487f1C0dB5592C72eAcD7DC1759fe'\n// const STAKING_ETH_ADDRESS = '0xdDEA8F9e69B05C1aAbeeb58d221652A3B92d613C'\n// const HEGIC_ADDRESS = '0xaA2A5976a9E9D3d6E4664145F97105881C16c0B9'\n\n// // FAKE CONTRACTS\n// const STAKING_POOL_ADDRESS = '0xb61D0128378DFe45722F9823ba4AB5a3935Ba640'\n// const STAKING_ETH_ADDRESS = '0xdDEA8F9e69B05C1aAbeeb58d221652A3B92d613C'\n// const STAKING_WBTC_ADDRESS = '0x54633aCF8aFF9039Fb632393D4194Ba29a825F42'\n// const HEGIC_ADDRESS = '0xaA2A5976a9E9D3d6E4664145F97105881C16c0B9'\n// const WBTC_ADDRESS = '0xBDD29c702f0414F19bB5576b46c0811C3A7a7033'\n\n//mainnet contracts\nconst STAKING_POOL_ADDRESS = '0xf4128B00AFdA933428056d0F0D1d7652aF7e2B35'\nconst NEW_STAKING_POOL_ADDRESS = '0x6859ea44DC8E9A42222Ea1BC38ED74E8c8fe6DC7'\nconst STAKING_ETH_ADDRESS = '0x1Ef61E3E5676eC182EED6F052F8920fD49C7f69a'\nconst STAKING_WBTC_ADDRESS = '0x840a1ae46b7364855206eb5b7286ab7e207e515b'\nconst HEGIC_ADDRESS = '0x584bC13c7D411c00c01A62e8019472dE68768430'\nconst ZHEGIC_ADDRESS = '0x837010619aeb2AE24141605aFC8f66577f6fb2e7'\nconst WBTC_ADDRESS = '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599'\n\n// returns null on errors\nfunction getContract(address, ABI, library, account) {\n    return new ethers.Contract(address, ABI, library.getSigner(account))\n}\n\nfunction useContract(address, ABI, withSignerIfPossible = true) {\n    const { library, account } = useWeb3React()\n  \n    return useMemo(() => {\n      if (!address || !ABI || !library) return null\n      try {\n        return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\n      } catch (error) {\n        console.error('Failed to get contract', error)\n        return null\n      }\n    }, [address, ABI, library, withSignerIfPossible, account])\n  } \n\nexport function useStakingPoolContract() {\n    return useContract(STAKING_POOL_ADDRESS, STAKING_POOL_ABI);\n}\n\nexport function useNewStakingPoolContract() {\n  return useContract(NEW_STAKING_POOL_ADDRESS, NEW_STAKING_POOL_ABI);\n}\n\nexport function useStakingETHContract() {\n  return useContract(STAKING_ETH_ADDRESS, STAKING_ETH_ABI);\n}\n\nexport function useStakingWBTCContract() {\n  return useContract(STAKING_WBTC_ADDRESS, STAKING_WBTC_ABI);\n}\n\nexport function useHegicContract() {\n  return useContract(HEGIC_ADDRESS, HEGIC_ABI);\n}\n\nexport function useZHegicContract() {\n  return useContract(ZHEGIC_ADDRESS, HEGIC_ABI);\n}\n\nexport function useWBTCContract() {\n  return useContract(WBTC_ADDRESS, WBTC_ABI);\n}","import { ethers } from 'ethers'\n\nconst truncateEtherValue = (str, maxDecimalDigits) => {\n    if (str.includes(\".\")) {\n    const parts = str.split(\".\");\n    return parts[0] + \".\" + parts[1].slice(0, maxDecimalDigits);\n    }\n    return str;\n};\n\nconst formatBN = (bn) => {\n    return ethers.utils.commify(ethers.utils.formatEther(bn.toString()));\n}\n\nconst truncateAddress = (str) => {\n    const len = str.length;\n    return str.substring(0, 8) + '...' + str.substring(len-7, len-1);\n}\n\nconst Asset = {WBTC: 0, ETH: 1}\n\nconst LOT_PRICE = ethers.utils.parseEther('888000');\n\n\nexport {\n    truncateEtherValue,\n    formatBN, \n    truncateAddress,\n    Asset,\n    LOT_PRICE\n}","import { createContext } from 'react';\n\nconst WalletContext = createContext(\n    {\n        context: {},\n        balances: {},\n        allowances: {},\n        poolConditions: {},\n        profits: {},\n        connect: () => {},\n        disconnect: () => {}\n    });\n\nexport {\n    WalletContext\n};\n\n","// import { useWeb3React } from '@web3-react/core';\nimport React, { useState, useEffect, useContext } from 'react'\nimport { useStakingPoolContract } from '../../contracts/useContract';\nimport { CardTitle, Row, Badge, Col, Card, Input, InputGroup, InputGroupAddon, InputGroupText, Button, CardText, Alert } from 'reactstrap'\nimport { ethers } from 'ethers'\nimport { truncateEtherValue, formatBN, Asset } from '../../utils'\nimport { WalletContext } from '../../context/Wallet'\n\nfunction YourSharesTab () {\n    // const {account, library, chainId } = useWeb3React();\n    const wallet = useContext(WalletContext);\n    const {account, library, chainId } = wallet.context;\n\n    const stakingPool = useStakingPoolContract();\n\n    const [profitETH, setProfitETH] = useState(ethers.BigNumber.from('0'));\n    const [profitWBTC, setProfitWBTC] = useState(ethers.BigNumber.from('0'));\n    const [statusMsg, setStatusMsg] = useState('');\n    const [claimButtonDisabled, setClaimButtonDisabled] = useState(false);\n    const [amountToWithdraw, setAmountToWithdraw] = useState('');\n    const [withdrawButtonEnabled, setWithdrawButtonEnabled] = useState(false);\n    const [statusType, setStatusType] = useState('primary');\n    \n    useEffect(() => {\n        let status = true;\n        status = status && (amountToWithdraw > 0 || amountToWithdraw == '');\n        if(amountToWithdraw != '')  \n            status = status && ethers.utils.parseEther(amountToWithdraw).lte(wallet.balances.sHEGICBalance.value);\n        setWithdrawButtonEnabled(status);\n    }, [wallet.balances.sHEGICBalance, amountToWithdraw])\n\n    const waitAndUpdate = async (txRequest) => {\n        setStatusType(\"primary\");\n        setStatusMsg( (<a style={{color:'#19274d'}} target='_blank' href={`https://etherscan.io/tx/${txRequest.hash}`}>Pending transaction {txRequest.hash}</a> ) );\n        await txRequest.wait();\n        setStatusMsg(\"\");\n    }\n\n    const claimProfit = async () => {\n        const txRequest = await stakingPool.claimAllProfit({from: account});\n        setClaimButtonDisabled(true);\n        await waitAndUpdate(txRequest)\n    }\n\n    useEffect(() => {\n        if (!!account && !!library) {\n            stakingPool.profitOf(account, Asset.ETH).then(profit => {\n                setClaimButtonDisabled(true);\n\n                stakingPool.profitOf(account, Asset.WBTC).then(profit => {\n                    setProfitWBTC(profit);\n                    if(!profit.isZero())\n                        setClaimButtonDisabled(false);\n                })\n                setProfitETH(profit);\n                if(!profit.isZero())\n                    setClaimButtonDisabled(false);\n            })\n        }\n    }, [wallet.balances]);\n\n    const withdrawHegic = async () => {\n        let amount;\n        if(amountToWithdraw == '') \n            amount = wallet.balances.sHEGICBalance.value\n        else \n            amount = ethers.utils.parseEther(amountToWithdraw); \n        \n        try {\n            const txRequest = await stakingPool.withdraw(amount);\n            setAmountToWithdraw(0);\n            await waitAndUpdate(txRequest);\n        } catch (error) {\n            setStatusType(\"danger\");\n            setStatusMsg(\"Ups something went wrong.\");\n            if(await stakingPool.canWithdraw(account).then(x => !x))\n                setStatusMsg(\"You deposited less than 15 mins ago. Your funds are still locked\");\n            else\n                setStatusMsg(\"Ups! Something went wrong. Are you withdrawing more funds than available?\")\n        }\n    }\n\n    const claimProfitAndWithdrawAll = async () => {\n        try {\n            const txRequest = await stakingPool.claimProfitAndWithdraw();\n            setAmountToWithdraw(0);\n            await waitAndUpdate(txRequest);\n        } catch (error) {\n            setStatusType(\"danger\");\n            setStatusMsg(\"Ups something went wrong.\");\n            if(await stakingPool.canWithdraw(account).then(x => !x))\n                setStatusMsg(\"You deposited less than 15 mins ago. Your funds are still locked\");\n            else\n                setStatusMsg(\"Ups! Something went wrong. Are you withdrawing more funds than available?\")\n        }\n    }\n    \n    const withdrawMax = () => {\n        setAmountToWithdraw(ethers.utils.formatEther(wallet.balances.sHEGICBalance.value));\n    }\n\n    const StatusMsg = () => {\n        return (\n            <>\n            <br />\n            { statusMsg ? (\n                <Alert color={statusType}>\n                    {statusMsg}\n                </Alert>\n            ) : null }\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Row>\n                <Col sm=\"12\">\n                    <Card body >\n                        <CardTitle><h3>Your Shares & Profit</h3></CardTitle>\n                        <h5>Your Profit</h5>\n                        <div style={{\n                            display:'flex',\n                            flexDirection:'column',\n                            textAlign:'center'}}>\n                            <div style={{\n                                    width:'100%',\n                                    display: 'flex',\n                                    flexDirection:'row',\n                                    textAlign:'center'\n                                }}>\n                                <div className=\"profit-info-box eth\">\n                                        <b>Your ETH profit:</b>\n                                        {truncateEtherValue(formatBN(profitETH), 4)} ETH\n                                        <br /> \n                                </div>\n                                <div className=\"profit-info-box wbtc\">\n                                        <b>Your WBTC profit:</b>\n                                        {truncateEtherValue(ethers.utils.commify(ethers.utils.formatUnits(profitWBTC, 8)), 4)} WBTC\n                                        <br /> \n                                </div>\n                            </div>\n                                <Button className=\"main-button\" style={{marginTop:'5px'}} disabled={claimButtonDisabled} onClick={claimProfit}>\n                                        CLAIM PROFIT\n                                    </Button>\n                                    <span style={{fontSize:'12px', color:'#667fcc'}}>A performance fee ({wallet.poolConditions.ownerPerformanceFee.value}% of profit) applies.</span>                             \n                            </div>\n                            <StatusMsg />\n                            <br />\n                            <h5>Your share <Badge color=\"primary\" style={{fontSize:'9pt'}}>You have {truncateEtherValue(formatBN(wallet.balances.sHEGICBalance.value),2)} sHEGIC</Badge></h5>                    \n\n                            <InputGroup>\n                            <Input placeholder={formatBN(wallet.balances.sHEGICBalance.value)} \n                            value={amountToWithdraw}\n                            onChange={(event) => {\n                                setAmountToWithdraw(event.target.value)\n                            }}/>\n                            <InputGroupAddon addonType='append'>\n                            <Button className=\"input-button\" onClick={withdrawMax}>MAX</Button>\n                            </InputGroupAddon>\n                            <InputGroupAddon addonType=\"append\">\n                            <InputGroupText>HEGIC</InputGroupText>\n                            </InputGroupAddon>  \n                        </InputGroup>\n                        <Button className=\"main-button\" disabled={ !withdrawButtonEnabled ? true : false } onClick={withdrawHegic}>\n                                    <b>WITHDRAW</b>\n                        </Button>\n                        <Button className=\"main-button\" onClick={claimProfitAndWithdrawAll}>\n                                    <b>CLAIM PROFIT AND WITHDRAW ALL</b>\n                        </Button>\n                    </Card>\n                </Col>\n            </Row> \n        </>\n    )\n}\n\nexport default YourSharesTab;","// import { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers'\nimport React, {useState, useEffect, useContext} from 'react'\nimport { Row, Col, Card, CardTitle, Alert, CardText, Input, Button, Badge, InputGroup, InputGroupAddon, InputGroupText, Progress} from 'reactstrap'\nimport { useStakingPoolContract, useHegicContract, useNewStakingPoolContract, useZHegicContract } from '../../contracts/useContract';\nimport { formatBN, truncateEtherValue, Asset } from '../../utils'\nimport { WalletContext } from '../../context/Wallet'\n\nfunction MigrateTabZLot() {\n    const wallet = useContext(WalletContext);\n    const {account, library, chainId } = wallet.context;\n\n    const zHEGIC = useZHegicContract();\n    const stakingPool = useStakingPoolContract();\n    const newStakingPool = useNewStakingPoolContract();\n\n    const [statusMsg, setStatusMsg] = useState();\n    const [totalBalance, setTotalBalance] = useState(ethers.BigNumber.from('0'));\n    const [lockedBalance, setLockedBalance] = useState(ethers.BigNumber.from('0'));\n    const [allowanceIsZero, setAllowanceIsZero] = useState(true);\n\n    const [totalNumberOfStakingLots, setTotalNumberOfStakingLots] = useState(0);\n    const [numberOfStakingLotsETH, setNumberOfStakingLotsETH] = useState(0);\n    const [numberOfStakingLotsWBTC, setNumberOfStakingLotsWBTC] = useState(0);\n    \n    const [amountToDeposit, setAmountToDeposit] = useState(ethers.BigNumber.from('0'));\n    const [depositButtonEnabled, setDepositButtonEnabled] = useState(false);\n\n    useEffect(() => {\n        let status = true;\n        status = status && (amountToDeposit > 0 || amountToDeposit == '');\n        status = status && !allowanceIsZero;  \n        status = status && wallet.balances.zHEGICBalance.value != 0\n   \n        if(amountToDeposit != '')  \n            status = status && ethers.utils.parseEther(amountToDeposit).lte(wallet.balances.HEGICBalance.value);\n        setDepositButtonEnabled(status);\n    }, [wallet.balances.zHEGICBalance, allowanceIsZero, amountToDeposit])\n\n    useEffect(() => {\n        setAllowanceIsZero(wallet.allowances.zHEGICAllowance.value.isZero());\n    }, [wallet.allowances]);\n\n    useEffect(() => {\n        if(!!account && !!library){\n            setAmountToDeposit('');\n\n            stakingPool.totalBalance().then(\n                (balance) => setTotalBalance(balance)\n            );\n            stakingPool.lockedBalance().then(\n                (balance) => setLockedBalance(balance)\n            );\n            stakingPool.totalNumberOfStakingLots().then(\n                (n) => setTotalNumberOfStakingLots(n.toNumber())\n            );\n            stakingPool.numberOfStakingLots(Asset.ETH).then(\n                (n) => setNumberOfStakingLotsETH(n.toNumber())\n            );\n            stakingPool.numberOfStakingLots(Asset.WBTC).then(\n                (n) => setNumberOfStakingLotsWBTC(n.toNumber())\n            );\n        }\n     }, [wallet.balances]);\n\n    const allow = async () => {\n        const amountToAllow = ethers.BigNumber.from(\"8880000000000000000000000000000\");\n        const txRequest = await zHEGIC.approve(newStakingPool.address, amountToAllow);\n        \n        await waitAndUpdate(txRequest);\n    }\n\n    const waitAndUpdate = async (txRequest) => {\n        setStatusMsg( (<a style={{color:'#19274d'}} target='_blank' href={`https://etherscan.io/tx/${txRequest.hash}`}>Pending transaction {txRequest.hash}</a> ) );\n        await txRequest.wait();\n        setStatusMsg(\"\");\n    }\n\n    const depositMax = () => {\n        setAmountToDeposit(ethers.utils.formatEther(wallet.balances.HEGICBalance.value));\n    }\n\n    const migrateHegic = async () => {\n        let amount;\n        if(amountToDeposit == '') \n            amount = wallet.balances.HEGICBalance.value\n        else \n            amount = ethers.utils.parseEther(amountToDeposit); \n        const zPoolAddress = \"0x6eC088B454d2dB7a2d8879A25d9ce015039E30FB\"\n        const txRequest = await newStakingPool.migrateFromOldStakingPool(zPoolAddress);\n        setAmountToDeposit(0);\n        await waitAndUpdate(txRequest);\n    }\n\n    const StatusMsg = () => {\n        return (\n            <>\n            { statusMsg ? (\n                <Alert color=\"primary\" style={{marginTop:'10px'}}>\n                    {statusMsg}\n                </Alert> \n            ) : null }\n            </>\n        );\n    }\n\n    return (\n        <Row>\n        <Col sm=\"12\">\n            <Card body>\n                <CardTitle><h3>Migrate ZLot</h3></CardTitle>\n                <CardText>\n                    <Badge color='secondary'>{totalNumberOfStakingLots} Staking Lots Purchased</Badge> <Badge color='primary'>{numberOfStakingLotsETH} ETH Lots</Badge> <Badge color='warning'>{numberOfStakingLotsWBTC} BTC Lots</Badge> <Badge color='secondary'>{truncateEtherValue(formatBN(totalBalance), 3)} HEGIC in pool</Badge>\n                    <Alert style={{textAlign:'center', margin:'5pt', padding:'5pt', fontSize:'10pt'}} color=\"warning\">\n                            HegicStaking has been updated to V8888. You should move your funds to the <a href=\"https://www.hegicstaking.co\" style={{'color':'#121c36'}}>new version</a>.\n                    </Alert>\n                    \n                    Hegic Staking has been migrated to v8888. You can migrate your funds and enjoy a 20% discounted fee<br />\n                    &nbsp;&nbsp;1. Approve the new Hegic Staking Pool to manage your sHEGIC<br />\n                    &nbsp;&nbsp;2. Migrate funds and enjoy your low fees. <br />\n                    &nbsp;&nbsp;3. Go back to high APYs (currently +45%) and enjoy whale profits<br />\n               </CardText>\n               <Badge color={wallet.balances.zHEGICBalance.value != 0 ? \"primary\" : \"warning\"} style={{fontSize:'9pt'}}>You have {truncateEtherValue(formatBN(wallet.balances.zHEGICBalance.value),2)} zHEGIC</Badge>\n                { allowanceIsZero && wallet.balances.zHEGICBalance.value != 0 ?\n                    (<Button className=\"main-button\" onClick={allow}>APPROVE zHEGIC</Button>)\n                    :\n                    ( null ) \n                }\n                <Button className=\"main-button\" disabled={ !depositButtonEnabled ? true : false } onClick={migrateHegic}><b>MIGRATE</b></Button>\n                <StatusMsg />\n            </Card>\n        </Col>\n      </Row>\n    )\n}\n\nexport default MigrateTabZLot;","// import { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers'\nimport React, {useState, useEffect, useContext} from 'react'\nimport { Row, Col, Card, CardTitle, Alert, CardText, Input, Button, Badge, InputGroup, InputGroupAddon, InputGroupText, Progress} from 'reactstrap'\nimport { useStakingPoolContract, useHegicContract, useNewStakingPoolContract} from '../../contracts/useContract';\nimport { formatBN, truncateEtherValue, Asset } from '../../utils'\nimport { WalletContext } from '../../context/Wallet'\n\nfunction MigrateTab() {\n    const wallet = useContext(WalletContext);\n    const {account, library, chainId } = wallet.context;\n\n    const HEGIC = useHegicContract();\n    const stakingPool = useStakingPoolContract();\n    const newStakingPool = useNewStakingPoolContract();\n\n    const [statusMsg, setStatusMsg] = useState();\n    const [totalBalance, setTotalBalance] = useState(ethers.BigNumber.from('0'));\n    const [lockedBalance, setLockedBalance] = useState(ethers.BigNumber.from('0'));\n    const [allowanceIsZero, setAllowanceIsZero] = useState(true);\n\n    const [totalNumberOfStakingLots, setTotalNumberOfStakingLots] = useState(0);\n    const [numberOfStakingLotsETH, setNumberOfStakingLotsETH] = useState(0);\n    const [numberOfStakingLotsWBTC, setNumberOfStakingLotsWBTC] = useState(0);\n    \n    const [amountToDeposit, setAmountToDeposit] = useState(ethers.BigNumber.from('0'));\n    const [depositButtonEnabled, setDepositButtonEnabled] = useState(false);\n\n    useEffect(() => {\n        let status = true;\n        status = status && (amountToDeposit > 0 || amountToDeposit == '');\n        status = status && !allowanceIsZero;     \n        status = status && wallet.balances.sHEGICBalance.value != 0\n        if(amountToDeposit != '')  \n            status = status && ethers.utils.parseEther(amountToDeposit).lte(wallet.balances.HEGICBalance.value);\n        setDepositButtonEnabled(status);\n    }, [wallet.balances.HEGICBalance, allowanceIsZero, amountToDeposit])\n\n    useEffect(() => {\n        setAllowanceIsZero(wallet.allowances.HEGICAllowance.value.isZero());\n    }, [wallet.allowances]);\n\n    useEffect(() => {\n        if(!!account && !!library){\n            setAmountToDeposit('');\n\n            stakingPool.totalBalance().then(\n                (balance) => setTotalBalance(balance)\n            );\n            stakingPool.lockedBalance().then(\n                (balance) => setLockedBalance(balance)\n            );\n            stakingPool.totalNumberOfStakingLots().then(\n                (n) => setTotalNumberOfStakingLots(n.toNumber())\n            );\n            stakingPool.numberOfStakingLots(Asset.ETH).then(\n                (n) => setNumberOfStakingLotsETH(n.toNumber())\n            );\n            stakingPool.numberOfStakingLots(Asset.WBTC).then(\n                (n) => setNumberOfStakingLotsWBTC(n.toNumber())\n            );\n        }\n     }, [wallet.balances]);\n\n    const allow = async () => {\n        const amountToAllow = ethers.BigNumber.from(\"8880000000000000000000000000000\");\n        const txRequest = await stakingPool.approve(newStakingPool.address, amountToAllow);\n        \n        await waitAndUpdate(txRequest);\n    }\n\n    const waitAndUpdate = async (txRequest) => {\n        setStatusMsg( (<a style={{color:'#19274d'}} target='_blank' href={`https://etherscan.io/tx/${txRequest.hash}`}>Pending transaction {txRequest.hash}</a> ) );\n        await txRequest.wait();\n        setStatusMsg(\"\");\n    }\n\n    const depositMax = () => {\n        setAmountToDeposit(ethers.utils.formatEther(wallet.balances.HEGICBalance.value));\n    }\n\n    const migrateHegic = async () => {\n        let amount;\n        if(amountToDeposit == '') \n            amount = wallet.balances.HEGICBalance.value\n        else \n            amount = ethers.utils.parseEther(amountToDeposit); \n        \n        const txRequest = await newStakingPool.migrateFromOldStakingPool(stakingPool.address);\n        setAmountToDeposit(0);\n        await waitAndUpdate(txRequest);\n    }\n\n    const StatusMsg = () => {\n        return (\n            <>\n            { statusMsg ? (\n                <Alert color=\"primary\" style={{marginTop:'10px'}}>\n                    {statusMsg}\n                </Alert> \n            ) : null }\n            </>\n        );\n    }\n\n    return (\n        <Row>\n        <Col sm=\"12\">\n            <Card body>\n                <CardTitle><h3>Migrate sHEGIC</h3></CardTitle>\n                <CardText>\n                    <Badge color='secondary'>{totalNumberOfStakingLots} Staking Lots Purchased</Badge> <Badge color='primary'>{numberOfStakingLotsETH} ETH Lots</Badge> <Badge color='warning'>{numberOfStakingLotsWBTC} BTC Lots</Badge> <Badge color='secondary'>{truncateEtherValue(formatBN(totalBalance), 3)} HEGIC in pool</Badge>\n                    <Alert style={{textAlign:'center', margin:'5pt', padding:'5pt', fontSize:'10pt'}} color=\"warning\">\n                            HegicStaking has been updated to V8888. You should move your funds to the <a href=\"https://www.hegicstaking.co\" style={{'color':'#121c36'}}>new version</a>.\n                    </Alert>\n                    \n                    Hegic Staking has been migrated to v8888. You can migrate your funds and enjoy a 20% discounted fee<br />\n                    &nbsp;&nbsp;1. Approve the new Hegic Staking Pool to manage your sHEGIC<br />\n                    &nbsp;&nbsp;2. Migrate funds and enjoy your low fees. <br />\n                    &nbsp;&nbsp;3. Go back to high APYs (currently +45%) and enjoy whale profits<br />\n               </CardText>\n               <Badge color={wallet.balances.sHEGICBalance.value != 0 ? \"primary\" : \"warning\"} style={{fontSize:'9pt'}}>You have {truncateEtherValue(formatBN(wallet.balances.sHEGICBalance.value),2)} sHEGIC</Badge>\n                { allowanceIsZero && wallet.balances.sHEGICBalance.value != 0 ?\n                    (<Button className=\"main-button\" onClick={allow}>APPROVE sHEGIC</Button>)\n                    :\n                    ( null ) \n                }\n                <Button className=\"main-button\" disabled={ !depositButtonEnabled ? true : false } onClick={migrateHegic}><b>MIGRATE</b></Button>\n                <StatusMsg />\n            </Card>\n        </Col>\n      </Row>\n    )\n}\n\nexport default MigrateTab;","import { createContext } from 'react';\n\nconst PoolContext = createContext(\n    {\n        status: {}\n    });\n\nexport {\n    PoolContext\n};\n\n","import React, { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useHegicContract, useWBTCContract, useStakingETHContract, useStakingWBTCContract } from '../contracts/useContract'\nimport { Container, Row, Col } from 'reactstrap'\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Button } from 'reactstrap';\nimport classnames from 'classnames'\n\nimport YourSharesTab from './tabs/yourSharesTab'\nimport MigrateTabZLot from './tabs/migrateTab_zlot'\nimport StatsTab from './tabs/migrateTab'\nimport { PoolContext } from '../context/Pool'\n\nfunction Dashboard() {\n  const { account } = useWeb3React()\n  const HEGIC = useHegicContract();\n  const stakingETH = useStakingETHContract();\n  const stakingWBTC = useStakingWBTCContract();\n  const WBTC = useWBTCContract();\n\n  const [lots, setLots] = useState([]);\n  const [totalBalance, setTotalBalance] = useState(ethers.BigNumber.from('0'))\n  const [lockedBalance, setLockedBalance] = useState(ethers.BigNumber.from('0'))\n\n  const balances = {\n    totalBalance: {value: totalBalance, setValue: setTotalBalance},\n    lockedBalance: {value: lockedBalance, setValue: setLockedBalance}\n  }\n\n  const waitAndUpdate = async (txRequest) => {\n    console.log(txRequest.hash)\n    await txRequest.wait();\n  }\n\n  const mintHegic = async () => {\n    const amountToMint = ethers.BigNumber.from(\"300000000000000000000000\");\n    const txRequest = await HEGIC.mintTo(account, amountToMint);\n    await waitAndUpdate(txRequest)\n  }\n\n  const mintWBTC = async () => {\n    const amountToMint = ethers.BigNumber.from(\"10000000000\");\n    const txRequest = await WBTC.mintTo(account, amountToMint);\n    const txRequest2 = await WBTC.approve(stakingWBTC.address, amountToMint);\n    await waitAndUpdate(txRequest)\n    await waitAndUpdate(txRequest2)\n  }\n  \n  const sendProfit = async () => {\n    const txRequest = await stakingETH.sendProfit({ value: ethers.utils.parseEther(\"0.1\") })\n    await waitAndUpdate(txRequest)\n  }\n\n  const sendProfitWBTC = async () => {\n    const txRequest = await stakingWBTC.sendProfit(ethers.utils.parseUnits(\"0.1\", 8))\n    await waitAndUpdate(txRequest)\n  }\n\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if (activeTab !== tab) setActiveTab(tab);\n  }\n\n  return (\n    <Container >\n      <Row style={{ marginTop: \"5vh\" }}>\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n          <div>\n            <Nav tabs style={{ justifyContent: \"center\", borderBottom: 0 }}>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '1' })}\n                  onClick={() => { toggle('1'); }}\n                >\n                  Migrate\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '2' })}\n                  onClick={() => { toggle('2'); }}\n                >\n                  Shares{\"&\"}Profit\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === '3' })}\n                  onClick={() => { toggle('3'); }}\n                >\n                  Migrate ZLot\n                </NavLink>\n              </NavItem>\n            </Nav>\n            <TabContent activeTab={activeTab}>\n              <PoolContext.Provider value={{balances, lots}}>\n                <TabPane tabId=\"3\">\n                  <MigrateTabZLot />\n                </TabPane>\n                <TabPane tabId=\"2\">\n                  <YourSharesTab />\n                </TabPane>\n                <TabPane tabId=\"1\">\n                  <StatsTab />\n                </TabPane>\n              </PoolContext.Provider>\n            </TabContent>\n          </div>\n        </Col>\n      </Row>\n      <Row style={{marginBottom:'5vh'}}>\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }} style={{display:'flex', justifyContent:'center'}}>\n        {/* <Button size=\"sm\" onClick={mintHegic}>Mint 300k HEGIC</Button>\n        <Button size=\"sm\" onClick={mintWBTC}>Mint 10 WBTC</Button>\n        <Button size=\"sm\" onClick={sendProfit}>Send Profit (0.1ETH)</Button>\n        <Button size=\"sm\" onClick={sendProfitWBTC}>Send Profit (0.1WBTC)</Button> */}\n        {/* <span><a href=\"#\">About</a></span> */}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Dashboard;","import React, { useState, useEffect, useContext } from 'react'\n// import { useWeb3React } from '@web3-react/core'\nimport { useHegicContract, useStakingPoolContract, useNewStakingPoolContract, useZHegicContract } from '../contracts/useContract'\nimport { ethers } from 'ethers';\nimport { Badge, Button, Col, Navbar} from 'reactstrap';\nimport { hexZeroPad } from 'ethers/lib/utils';\nimport { truncateAddress, truncateEtherValue, formatBN } from '../utils'\nimport { WalletContext } from '../context/Wallet'\n\nfunction Header(props) {\n    // const { account, library, chainId, active } = useWeb3React();\n    const wallet = useContext(WalletContext);\n    const { account, library, chainId, active } = wallet.context;\n\n    const HEGIC = useHegicContract();\n    const zHEGIC = useZHegicContract();\n    const stakingPool = useStakingPoolContract();\n    const newStakingPool = useNewStakingPoolContract();\n\n    useEffect(() => {\n        if(!!account && !!library) {\n            library.getBalance(account).then((balance) => {\n                wallet.balances.ETHBalance.setValue(balance)\n            });\n\n            stakingPool.balanceOf(account).then((balance) => {\n                wallet.balances.sHEGICBalance.setValue(balance)\n            });\n\n            HEGIC.balanceOf(account).then((balance) => {\n                wallet.balances.HEGICBalance.setValue(balance)\n            });\n\n            zHEGIC.balanceOf(account).then((balance) => {\n                wallet.balances.zHEGICBalance.setValue(balance)\n            });\n\n            stakingPool.allowance(account, newStakingPool.address).then((allowance) => {\n                wallet.allowances.HEGICAllowance.setValue(allowance);\n            });\n\n            zHEGIC.allowance(account, newStakingPool.address).then((allowance) => {\n                wallet.allowances.zHEGICAllowance.setValue(allowance);\n            });\n\n            stakingPool.ownerPerformanceFee(account).then(async fee => {\n                if(!fee.isZero())\n                    wallet.poolConditions.ownerPerformanceFee.setValue(fee.toNumber()/1000);\n                else\n                    wallet.poolConditions.ownerPerformanceFee.setValue(await stakingPool.performanceFee().then(n => n.toNumber()/1000));\n            });\n\n            const filter_inputs = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Transfer(address,address,uint256)\"),\n                    null,\n                    hexZeroPad(account,32)\n                ]\n            }\n\n            const filter_outputs = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Transfer(address,address,uint256)\"),\n                    hexZeroPad(account,32)\n                ]\n            }\n            \n            const filter_approve = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Approval(address,address,uint256)\"),\n                    hexZeroPad(account,32)\n                ]\n            }\n\n            const filter_profit = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"ClaimedProfit(address,uint256)\"),\n                    hexZeroPad(account,32)\n                ]\n            }\n\n            library.on(filter_inputs, (log, event) => {\n                HEGIC.balanceOf(account).then((balance) => {\n                    wallet.balances.HEGICBalance.setValue(balance)\n                });\n                stakingPool.balanceOf(account).then((balance) => {\n                    wallet.balances.sHEGICBalance.setValue(balance)\n                });\n            });\n\n            library.on(filter_profit, (log, event) => {\n                library.getBalance(account).then((balance) => {\n                    wallet.balances.ETHBalance.setValue(balance)\n                });\n                // UPDATE PROFIT\n            });\n\n            library.on(filter_outputs, (log, event) => {\n                HEGIC.balanceOf(account).then((balance) => {\n                    wallet.balances.HEGICBalance.setValue(balance)\n                });\n                stakingPool.balanceOf(account).then((balance) => {\n                    wallet.balances.sHEGICBalance.setValue(balance)\n                });\n            });\n\n            library.on(filter_approve, (log, event) => {\n                zHEGIC.allowance(account, newStakingPool.address).then((allowance) => {\n                    wallet.allowances.zHEGICAllowance.setValue(allowance);\n                });\n            });\n        }\n            \n\n    }, [account, library, chainId])\n\n    const Wallet = () => {\n        return (\n            <>\n                <Col sm='0' md={{size:2, offset:5}} style={{display:'flex', justifyContent:'center'}}>\n                    <h3 style={{color:'#45fff4', zIndex:'99', fontFamily:'Jura', fontWeight:'bold'}}>HEGIC</h3>\n                </Col>\n                <Col sm='12' md={{size:5, offset:0}} style={{display:'flex', justifyContent:'flex-end'}}>\n                { active ? (\n                    <div>\n                        <Badge color=\"primary\" style={{margin:\"2.5px\"}}>{truncateEtherValue(formatBN(wallet.balances.HEGICBalance.value),2)} HEGIC </Badge>\n                        <Badge color=\"secondary\" style={{margin:\"2.5px\"}}>{truncateEtherValue(formatBN(wallet.balances.ETHBalance.value),4)} ETH </Badge>\n                        <span style={{color:'#defefe', fontSize:'12px'}}>{truncateAddress(account)}</span>\n                        <Button color=\"link\" onClick={wallet.disconnect}>Disconnect</Button>\n                    </div>\n                ) : (\n                    <Button color=\"link\" onClick={wallet.connect}>Connect</Button>\n                )}\n                </Col>\n            </>\n        )\n    }\n    \n    return (\n            <Navbar style={{display:'flex', backgroundColor:'#19274d', borderBottom: '1px solid #45fff4'}}>\n                <Wallet />\n            </Navbar>\n    );\n}\n\nexport default Header;","import React, { useContext } from 'react';\nimport { Row, Container, Col, Button } from 'reactstrap';\nimport { WalletContext } from '../context/Wallet';\n\nfunction Intro(props) {\n    const connect = useContext(WalletContext).connect\n    return (\n    <Container>\n        <Row style={{marginTop:'10vh', minHeight:'50vh', zIndex:'-1', textAlign:'center'}}>\n            <Col sm='12' md={{ size: 6, offset: 3}}>\n                    <h1 style={{\n                        color:'#45fff4',\n                        fontFamily:'Jura',\n                        fontWeight:'bold',\n                        lineHeight:'125%',\n                        fontSize:'46px',\n                        textTransform:'uppercase'\n                        }}>Hegic Staking Lots for everyone</h1>\n                    <div style={{color: '#defefe', fontFamily:'Exo 2', fontWeight:'500', lineHeight:'150%'}}>\n                    Hegic Protocol generates fees that are distributed among Hegic Staking Lot owners.\n                    Those staking lots are priced at 888,000 HEGIC, being simply unreachable for most of HEGIC holders.\n                    Thanks to <b>Staking Pools</b> you can own a share of a staking lot and earn fees that were reserved\n                    for whales only. \n                    </div>\n                    <div style={{marginTop:'25px', display:'flex', justifyContent:'center'}}>\n                    <Button className=\"main-button\"\n                        onClick={connect}>CONNECT WALLET</Button>\n                    </div>\n            </Col>\n        </Row>\n    </Container>);\n}\n\nexport default Intro;","import { InjectedConnector } from '@web3-react/injected-connector'\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] })\n","import React, { useContext, useState, useEffect } from 'react';\nimport Dashboard from './components/dashboard';\nimport Header from './components/header'\nimport Intro from './components/intro'\nimport { useWeb3React, Web3ReactProvider } from '@web3-react/core'\nimport { ethers } from 'ethers';\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { injected } from './connectors';\nimport { WalletContext } from './context/Wallet';\nimport { useHegicContract, usePooledStakingETHContract } from './contracts/useContract'\nfunction getLibrary(provider, connector) {\n  return new ethers.providers.Web3Provider(provider)\n}\n\nfunction App() {\n  const [ETHBalance, setETHBalance] = useState(ethers.BigNumber.from('0'));\n  const [HEGICBalance, setHEGICBalance] = useState(ethers.BigNumber.from('0'));\n  const [sHEGICBalance, setSHEGICBalance] = useState(ethers.BigNumber.from('0'));\n  const [zHEGICBalance, setZHEGICBalance] = useState(ethers.BigNumber.from('0'));\n  const [HEGICAllowance, setHEGICAllowance] = useState(ethers.BigNumber.from('0'));\n  const [zHEGICAllowance, setZHEGICAllowance] = useState(ethers.BigNumber.from('0'));\n  const [ownerPerformanceFee, setOwnerPerformanceFee] = useState(0);\n  const [ownerCanWithdraw, setOwnerCanWithdraw] = useState(false);\n  const [profitETH, setProfitETH] = useState(ethers.BigNumber.from('0'));\n  const [profitWBTC, setProfitWBTC] = useState(ethers.BigNumber.from('0'));\n\n  const balances = {\n    ETHBalance: {value: ETHBalance, setValue: setETHBalance},\n    HEGICBalance: {value: HEGICBalance, setValue: setHEGICBalance},\n    sHEGICBalance: {value: sHEGICBalance, setValue: setSHEGICBalance},\n    zHEGICBalance: {value: zHEGICBalance, setValue: setZHEGICBalance}\n  }\n\n  const allowances = {\n    HEGICAllowance: {value: HEGICAllowance, setValue: setHEGICAllowance},\n    zHEGICAllowance: {value: zHEGICAllowance, setValue: setZHEGICAllowance}\n  }\n\n  const poolConditions = {\n    ownerPerformanceFee: { value: ownerPerformanceFee, setValue: setOwnerPerformanceFee },\n    canWithdraw: { value: ownerCanWithdraw, setValue: setOwnerCanWithdraw }\n  }\n\n  const profits = {\n    profitETH: { value: profitETH, setValue: setProfitETH },\n    profitWBTC: { value: profitWBTC, setValue: setProfitWBTC }\n  }\n\n  const context = useWeb3React()\n  const { connector, active, activate, deactivate, account, library, chainId } = context\n  \n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = useState()\n  useEffect(() => {\n  if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n  }\n  }, [activatingConnector, connector])\n  \n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n  \n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector)\n  \n  function connect() {\n      setActivatingConnector(injected)\n      activate(injected)\n  }\n  \n  function disconnect() {\n  deactivate(injected)\n  }\n\n  return (\n  <WalletContext.Provider value={{context, connect, disconnect, balances, allowances, poolConditions, profits}}>\n    <div style={{ background:'radial-gradient(68.28% 53.52% at 50% 50%, #1c2a4f 0%, #111b35 100%)'}}>\n        <div style={{backgroundImage:'url(https://www.hegic.co/assets/img/background-image.svg)', height:'100vh'}}>\n            <Header />\n            { active ? (\n              <Dashboard />\n            ) : (\n              <Intro />\n            )}\n            {/* <Stats /> */}\n        </div>\n    </div>\n  </WalletContext.Provider>\n  );\n}\n\n\nexport default () => (\n  <Web3ReactProvider getLibrary={getLibrary}>\n    <App />\n  </Web3ReactProvider>\n)\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3React()\n  \n    const [tried, setTried] = useState(false)\n  \n    useEffect(() => {\n      injected.isAuthorized().then((isAuthorized) => {\n        if (isAuthorized) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      })\n    }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n  \n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n      if (!tried && active) {\n        setTried(true)\n      }\n    }, [tried, active])\n  \n    return tried\n  }\n  \n  export function useInactiveListener(suppress = false) {\n    const { active, error, activate } = useWeb3React()\n  \n    useEffect(() => {\n      const { ethereum } = window\n      if (ethereum && ethereum.on && !active && !error && !suppress) {\n        const handleConnect = () => {\n          console.log(\"Handling 'connect' event\")\n          activate(injected)\n        }\n        const handleChainChanged = (chainId) => {\n          console.log(\"Handling 'chainChanged' event with payload\", chainId)\n          activate(injected)\n        }\n        const handleAccountsChanged = (accounts) => {\n          console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n          if (accounts.length > 0) {\n            activate(injected)\n          }\n        }\n        const handleNetworkChanged = (networkId) => {\n          console.log(\"Handling 'networkChanged' event with payload\", networkId)\n          activate(injected)\n        }\n  \n        ethereum.on('connect', handleConnect)\n        ethereum.on('chainChanged', handleChainChanged)\n        ethereum.on('accountsChanged', handleAccountsChanged)\n        ethereum.on('networkChanged', handleNetworkChanged)\n  \n        return () => {\n          if (ethereum.removeListener) {\n            ethereum.removeListener('connect', handleConnect)\n            ethereum.removeListener('chainChanged', handleChainChanged)\n            ethereum.removeListener('accountsChanged', handleAccountsChanged)\n            ethereum.removeListener('networkChanged', handleNetworkChanged)\n          }\n        }\n      }\n    }, [active, error, suppress, activate])\n  }\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/custom.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}